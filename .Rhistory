rbind( data,df[c(1,2)][1,c(1,2)] )
rbind( data,df[c(1,2)][1,c(1,2)] )
new[[1]][c(1,2)][1,c(1,2)]
rbind(new[[1]][c(1,2)][1,c(1,2)],new[[2]][c(1,2)][1,c(1,2)])
rbind(new[[1]][c(1,2)][1,c(1,2)],new[[2]][c(1,2)][1,c(1,2)])
data <- data.frame()
data
simplify <- lapply(new, function(df){
print(df[c(1,2)][1,c(1,2)])
rbind(data,df[c(1,2)][1,c(1,2)] )
})
simplify
simplify <- as.data.frame(simplify)
simplify
simplify <- data.frame(simplify)
simplify
simplify <- sapply(new, function(df){
print(df[c(1,2)][1,c(1,2)])
rbind(data,df[c(1,2)][1,c(1,2)] )
})
as.data.frame(simplify)
simplify <- lapply(new, function(df){
#print(df[c(1,2)][1,c(1,2)])
rbind(data,df[c(1,2)][1,c(1,2)] )
})
simplify
data
simplify <- lapply(new, function(df){
#print(df[c(1,2)][1,c(1,2)])
rbind(data,df[c(1,2)][1,c(1,2)] )
print(data)
})
simplify <- lapply(new, function(df){
#print(df[c(1,2)][1,c(1,2)])
#rbind(data,df[c(1,2)][1,c(1,2)] )
df[c(1,2)][1,c(1,2)]
#print(data)
})
simplify
if(num == "best"){
num <- 1
}
num
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
simplify
simplify
dim(new)
new
dim(new)[1]
dim(new)[[1]]
dim(new[[1]])
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
simplify
num <- 10
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
}
else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
## Return a data frame with the hospital names and the (abbreviated) state name
num <- 10
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
num
simplify
## Return a data frame with the hospital names and the (abbreviated) state name
num <- "best"
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
## Return a data frame with the hospital names and the (abbreviated) state name
num <- "best"
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
}
else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
## Return a data frame with the hospital names and the (abbreviated) state name
num <- "best"
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,c(1,2)]
})
} else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
simplify
## Return a data frame with the hospital names and the (abbreviated) state name
ll <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3)
, b = list(var.1 = 4, var.2 = 5, var.3 = 6)
, c = list(var.1 = 7, var.2 = 8, var.3 = 9)
, d = list(var.1 = 10, var.2 = 11, var.3 = 12)
)
ll
rbindlist(ll)
library(datasets)
library(data.table)
rbindlist(ll)
simplify
simplify$AK
ldply (simplify, data.frame)
ldply (simplify, data.frame)
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply (simplify, data.frame)
data_fr
## Return a data frame with the hospital names and the (abbreviated) state name
class(data_fr) <- ldply (simplify, data.frame)
class(data_fr)
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- as.data.frame( ldply(simplify, data.frame) )
data_fr
class(data_fr)
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
class(data_fr)
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
class(data_fr)
colnames(data_fr) <- c("hospital", "state")
data_fr
num <- "best"
## For each state, find the hospital of the given rank
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,1]
})
} else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],c(1,2)]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,c(1,2)]
})
}
simplify
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
colnames(data_fr) <- c("hospital", "state")
data_fr
row.names(data_fr) <- data_fr$state
data_fr
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
colnames(data_fr) <- c("state", "hospital")
row.names(data_fr) <- data_fr$state
data_fr
data_fr <- data_fr[,c(2,1)]
data_fr
rankall <- function(outcome, num = "best") {
library(plyr)
## Read outcome data
evaluate_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = c("NA", "Not Available") )
## Check that the outcome are valid
if( !any(outcome == c("heart attack", "heart failure", "pneumonia")) ){
stop("invalid outcome")
}
## Select the data
if(outcome == "heart attack"){
i <- 11
}
else if(outcome == "heart failure"){
i <- 17
}
else if(outcome == "pneumonia"){
i <- 23
}
evaluate_data <- evaluate_data[ , c(2,7,i) ]
evaluate_data <- evaluate_data[complete.cases(evaluate_data),]
## Adjust the data in accordance to the states
evaluate_data[,3] <- as.numeric(evaluate_data[,3])
frag <- split(evaluate_data[,c(1,3)], evaluate_data$State)
new <- lapply(frag, function(df) {
arrange(df, df[[2]], df[[1]])
} )
num <- "best"
## For each state, find the hospital of the given rank
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,1]
})
} else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],1]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,1]
})
}
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
colnames(data_fr) <- c("state", "hospital")
row.names(data_fr) <- data_fr$state
data_fr <- data_fr[,c(2,1)]
}
source("C:\\Users\\matheus\\Documents\\GitHub\\ProgrammingAssignment3\\rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
library(plyr)
## Read outcome data
evaluate_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = c("NA", "Not Available") )
## Check that the outcome are valid
if( !any(outcome == c("heart attack", "heart failure", "pneumonia")) ){
stop("invalid outcome")
}
## Select the data
if(outcome == "heart attack"){
i <- 11
}
else if(outcome == "heart failure"){
i <- 17
}
else if(outcome == "pneumonia"){
i <- 23
}
evaluate_data <- evaluate_data[ , c(2,7,i) ]
evaluate_data <- evaluate_data[complete.cases(evaluate_data),]
## Adjust the data in accordance to the states
evaluate_data[,3] <- as.numeric(evaluate_data[,3])
frag <- split(evaluate_data[,c(1,3)], evaluate_data$State)
new <- lapply(frag, function(df) {
arrange(df, df[[2]], df[[1]])
} )
## For each state, find the hospital of the given rank
if(num == "best"){
simplify <- lapply(new, function(df){
df[c(1,2)][1,1]
})
} else if(num =="worst"){
simplify <- lapply(new, function(df){
df[c(1,2)][dim(df)[1],1]
})
} else {
num <- as.numeric(num)
simplify <- lapply(new, function(df){
df[c(1,2)][num,1]
})
}
## Return a data frame with the hospital names and the (abbreviated) state name
data_fr <- ldply(simplify, data.frame)
colnames(data_fr) <- c("state", "hospital")
row.names(data_fr) <- data_fr$state
data_fr <- data_fr[,c(2,1)]
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
rankhospital("MN", "heart attack", 10000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best <- function (state, outcome){
## Read outcome data
evaluate_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = c("NA", "Not Available") )
## Check that state and outcome are valid
if(!any(state == evaluate_data$State)){
stop("invalid state")
}
if( !any(outcome == c("heart attack", "heart failure", "pneumonia")) ){
stop("invalid outcome")
}
## Select the data
evaluate_data <- evaluate_data[ evaluate_data$State == state, ]
if(outcome == "heart attack"){
evaluate_data <- evaluate_data[ , c(2,11) ]
}
else if(outcome == "heart failure"){
evaluate_data <- evaluate_data[ , c(2,17) ]
}
else if(outcome == "pneumonia"){
evaluate_data <- evaluate_data[ , c(2,23) ]
}
## Adjust the data
evaluate_data <- evaluate_data[complete.cases(evaluate_data),]
evaluate_data[, 2] <- as.numeric(evaluate_data[,2])
## Return hospital name in that state with lowest 30-day death rate
print( evaluate_data[ order(evaluate_data[,2], evaluate_data[,1]), 1 ][1] )
}
best("SC", "heart attack")
best("MN", "heart attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
